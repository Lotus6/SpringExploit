package com.util;

import com.common.BasePayload;
import com.common.Constant;
import com.exploit.SpringCoreGet;
import com.exploit.SpringCorePost;
import javafx.scene.control.Alert;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import org.apache.commons.codec.binary.Base64;

import java.awt.*;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.text.SimpleDateFormat;

/**
 * Author 莲花
 */
public class Tools {
    public static boolean write(String path, String value) {
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(path));
            out.write(value);
            out.close();
        } catch (IOException e) {
            return false;
        }
        return true;
    }

    public static boolean checkTheURL(String weburl) {
        if (!weburl.startsWith("http")) {
            return false;
        }
        return true;
    }

    public static void showAlert(Alert.AlertType type, String title, String message) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    public static BasePayload getPayload(String select) {
        BasePayload bp = null;
        if (select.startsWith((String) Constant.VERSION[0])) {
            bp = new SpringCorePost();
        }
        if (select.startsWith((String) Constant.VERSION[1])) {
            bp = new SpringCoreGet();
        }
        return bp;
    }

    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");


    public static void browser(String url) throws Exception {
        Desktop desktop = Desktop.getDesktop();
        if (Desktop.isDesktopSupported() && desktop.isSupported(Desktop.Action.BROWSE)) {
            URI uri = new URI(url);
            desktop.browse(uri);
        }
    }

    public static void copyString(String str) {
        Clipboard clipboard = Clipboard.getSystemClipboard();
        ClipboardContent content = new ClipboardContent();
        content.putString(str);
        clipboard.setContent(content);
    }

    public static void downloadUsingNIO(String urlStr, String file) throws IOException {
        URL url = new URL(urlStr);
        ReadableByteChannel rbc = Channels.newChannel(url.openStream());
        FileOutputStream fos = new FileOutputStream(file);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }

    //BASE64加密
    public static String encode(String str) {
        String asB64 = null;
        try {
            if (str == null) {
                return null;
            }
            asB64 = new String(Base64.encodeBase64(str.getBytes()));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return asB64;
    }


    //BASE64解密
    public static String decodeToStr(final byte[] bytes) {
        return new String(Base64.decodeBase64(bytes));
    }


}
