package com.controller;

import com.common.BasePayload;
import com.common.Constant;
import com.entity.TableResult;
import com.entity.VulResult;
import com.exploit.SpringCloudFunction;
import com.util.Tools;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import java.text.SimpleDateFormat;
import java.util.Date;


public class Controller {

    @FXML
    private TextField field_url;

    @FXML
    private TextField field_cmd;

    @FXML
    private ChoiceBox version;

    @FXML
    private TableView<TableResult> tableView;

    @FXML
    private TableColumn<TableResult, String> tableCol_id;

    @FXML
    private TableColumn<TableResult, String> tableCol_url;

    @FXML
    private TableColumn<TableResult, String> tableCol_time;

    @FXML
    private Button getshell_btn;

    @FXML
    private Button clear_btn;

    @FXML
    private Label label_state;

    @FXML
    private Button exec_btn;

    private ObservableList<TableResult> table_list = FXCollections.observableArrayList();

    SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    Date now = new Date();

    @FXML
    public void initialize() {
        try {
            initDefaultSetting();
            initConfigComponents();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initDefaultSetting() {
        this.version.setValue(Constant.VERSION[0]);
        for (String ver : Constant.VERSION) {
            this.version.getItems().add(ver);
        }
        tableCol_id.setCellValueFactory(new PropertyValueFactory("id"));
        tableCol_url.setCellValueFactory(new PropertyValueFactory("url"));
        tableCol_time.setCellValueFactory(new PropertyValueFactory("time"));
    }

    private void initConfigComponents() {
        clear_btn.setOnAction((event -> {
            this.table_list.clear();
            label_state.setText(("....."));
        }));

        getshell_btn.setOnAction((event -> {
            String url = this.field_url.getText().trim();
            String verion = version.getValue().toString().trim();
            BasePayload bp = Tools.getPayload(verion);
            VulResult vul = null;
            if (verion.startsWith("Spring cloud")) {
                Tools.showAlert(Alert.AlertType.INFORMATION, "提示", "该漏洞是命令执行！");
                return;
            } else {
                try {
                    vul = bp.checkVUL(url);
                    if (vul.isRes()) {
                        TableResult tres = new TableResult(1, vul.getShell_url(), null);
                        tres.setTime(ft.format(now));
                        table_list.add(tres);
                        tableView.setItems(table_list);
                        Tools.showAlert(Alert.AlertType.INFORMATION, "提示", "GetShell成功！");
                    } else {
                        Tools.showAlert(Alert.AlertType.INFORMATION, "提示", "不存在Spring Core 漏洞！");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                label_state.setText(("检测完成"));
                this.tableView.setRowFactory(tv -> {
                    TableRow<TableResult> row = new TableRow<TableResult>();
                    row.setOnMouseClicked(even -> {
                        if (even.getClickCount() == 2 && (!row.isEmpty())) {
                            TableResult payload_url = row.getItem();
                            try {
                                Tools.browser(payload_url.getUrl());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    });
                    return row;
                });
            }
        }));

        exec_btn.setOnAction((event -> {
            String url = this.field_url.getText().trim();
            String cmd = this.field_cmd.getText().trim();
            String verion = version.getValue().toString().trim();
            if (verion.startsWith("Spring cloud")) {
                SpringCloudFunction scf = new SpringCloudFunction();
                try {
                    VulResult resvul = scf.execVUL(url, cmd);
                    if (resvul.isRes()) {
                        Tools.showAlert(Alert.AlertType.INFORMATION, "提示", "命令执行完成！");
                    } else {
                        Tools.showAlert(Alert.AlertType.INFORMATION, "提示", "命令执行失败！");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                Tools.showAlert(Alert.AlertType.INFORMATION, "提示", "请选择Spring Cloud Function漏洞！");
                return;
            }
        }));
    }
}
